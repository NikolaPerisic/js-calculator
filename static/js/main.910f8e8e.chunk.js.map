{"version":3,"sources":["Components/Controls.js","Components/Display.js","assets/Data/Data.js","Containers/Calculator.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["controls","props","react_default","a","createElement","className","id","onClick","clicked","disabled","active","value","inputs","replace","display","exp","out","data","calc","expression","output","grandTotal","clear","negative","mod","divide","seven","eight","nine","multiply","four","five","six","subtract","one","two","three","add","decimal","zero","delete","equals","Calculator","state","Data","inputHandler","el","item","currentTarget","Object","objectSpread","_this","lastChar","charAt","length","deleteHandler","clearAllHandler","expressionHandler","plusMinusHandler","newCalcHandler","indexOf","isNaN","parseInt","setState","slice","str","expressionEval","math","eval","toString","format","precision","parseFloat","concat","this","sliceIndex","_this2","entries","map","_ref","_ref2","slicedToArray","key","val","Controls","decimalActive","Display","Component","footer","href","target","App","Fragment","Containers_Calculator","Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.910f8e8e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.scss\";\n\nconst controls = props => {\n    return (\n        <button\n            className=\"Inputs\"\n            id={props.id}\n            onClick={props.clicked}\n            disabled={props.active}\n            value={props.inputs}\n        >\n            {props.inputs.replace(\"*\", \"x\").replace(\"/\", \"÷\")}\n        </button>\n    );\n};\n\nexport default controls;\n","import React from \"react\";\nimport \"../App.scss\";\n\nconst display = props => {\n    return (\n        <div className=\"Display\">\n            <div className=\"Brand\">casio</div>\n            <div className=\"Expression\">{props.exp}</div>\n            <div className=\"Output\">{props.out}</div>\n        </div>\n    );\n};\n\nexport default display;\n","const data = {\n    calc: {\n        expression: \"0\",\n        output: \"0\",\n        grandTotal: false\n    },\n    clear: \"C\",\n    negative: \"±\",\n    mod: \"%\",\n    divide: \"/\",\n    seven: \"7\",\n    eight: \"8\",\n    nine: \"9\",\n    multiply: \"*\",\n    four: \"4\",\n    five: \"5\",\n    six: \"6\",\n    subtract: \"-\",\n    one: \"1\",\n    two: \"2\",\n    three: \"3\",\n    add: \"+\",\n    decimal: \".\",\n    zero: \"0\",\n    delete: \"DEL\",\n    equals: \"=\"\n};\n\nexport default data;\n","import React, { Component } from \"react\";\nimport \"../App.scss\";\nimport Controls from \"../Components/Controls\";\nimport Display from \"../Components/Display\";\nimport Data from \"../assets/Data/Data\";\nimport math from \"mathjs\";\n\nclass Calculator extends Component {\n    state = { ...Data };\n\n    // manage all inputs\n    inputHandler = el => {\n        const item = el.currentTarget.value;\n        const data = { ...this.state.calc };\n        const lastChar = data.expression.charAt(data.expression.length - 1);\n\n        //check if inputs match any main expression operators\n        if (item === \"DEL\") return this.deleteHandler(lastChar);\n        if (item === \"C\") return this.clearAllHandler();\n        if (item === \"=\") return this.expressionHandler(data.expression);\n        if (item === \"±\") return this.plusMinusHandler(data, lastChar);\n        if (data.grandTotal) return this.newCalcHandler(item, data);\n\n        // check if input is a decimal operator and if output already contains decimal, preventing double decimal input\n        if (\n            (item === \".\" &&\n                data.output.indexOf(\".\") !== -1 &&\n                !isNaN(parseInt(lastChar))) ||\n            (item === \"0\" && data.output === \"0\") ||\n            (item === \".\" && lastChar === \".\")\n        )\n            return null;\n\n        // inserting zero in front of decimal, if user directly clicked on decimal operator\n        if (item === \".\" && isNaN(parseInt(lastChar))) {\n            data.output = \"0.\";\n            data.expression += \"0.\";\n            return this.setState({ calc: data });\n        }\n        // setting new input if calculation starts from 0\n        if (data.expression === \"0\") {\n            if (!isNaN(parseInt(item))) {\n                data.expression = item;\n                data.output = item;\n                // adding decimal to zero\n            } else if (item === \".\") {\n                data.expression += item;\n                data.output += item;\n            } else {\n                data.expression += item;\n            }\n            // adding decimal operator if display isn't zero\n        } else if (item === \".\") {\n            data.expression += item;\n            data.output += item;\n\n            // managing other inputs in case calc is already in process\n        } else {\n            // check what input user clicked, and update display such that no false input is parsed.\n            if (\n                (!isNaN(parseInt(item)) && !isNaN(parseInt(lastChar))) ||\n                (!isNaN(parseInt(item)) && lastChar === \".\")\n            ) {\n                data.expression += item;\n                data.output += item;\n            } else if (!isNaN(parseInt(item)) && isNaN(parseInt(lastChar))) {\n                data.expression += item;\n                data.output = item;\n            } else if (isNaN(parseInt(item)) && !isNaN(parseInt(lastChar))) {\n                data.expression += item;\n            } else {\n                data.expression = data.expression.slice(\n                    0,\n                    data.expression.length - 1\n                );\n                data.expression += item;\n            }\n        }\n        return this.setState({ calc: data });\n    };\n    // deleting value if user clicked on DEL btn, removing it from display\n    deleteHandler = lastChar => {\n        const data = { ...this.state.calc };\n        // check if expression string isn't already zeroed\n        if (data.output.length > 1 && !isNaN(parseInt(lastChar))) {\n            data.output = data.output.slice(0, data.output.length - 1);\n            data.expression = data.expression.slice(\n                0,\n                data.expression.length - 1\n            );\n            // in case of reaching up to a single digit output, reseting state to initial value with clearAll func\n        } else if (\n            (data.output.length > 1 && isNaN(parseInt(lastChar))) ||\n            data.output.length === 1\n        ) {\n            return this.clearAllHandler();\n        }\n        return this.setState({ calc: data });\n    };\n\n    // reset state to initial values\n    clearAllHandler = () => {\n        return this.setState({ calc: Data.calc });\n    };\n\n    // managing final expression if user clicked '='\n    expressionHandler = str => {\n        const data = { ...this.state.calc };\n        /*check if there are any trailing mathematical operators at the end of the expression string, and removing it, \n        effectively making string evaluable with math function */\n        if (isNaN(parseInt(str[str.length - 1]))) {\n            str = str.slice(0, str.length - 1);\n        }\n        //eval expression and dealing with Infinity cases, replacing it with zero on user display\n        const expressionEval = math.eval(str);\n        if (\n            expressionEval.toString() === \"Infinity\" ||\n            expressionEval.toString() === \"-Infinity\"\n        ) {\n            return this.clearAllHandler();\n        }\n        // formatting expression and dealing with floating point error\n        data.expression = math.format(expressionEval, { precision: 14 });\n        data.output = data.expression;\n        data.grandTotal = true;\n        return this.setState({ calc: data });\n    };\n\n    // dealing with +/- changing sign operator\n    plusMinusHandler(data, lastChar) {\n        // preventing sign operator to be enabled on mod expression\n        if (data.expression.indexOf(\"%\") !== -1) return null;\n        // adding negative sign in front of positive num\n        if (data.output === data.expression && parseFloat(data.output) > 0) {\n            data.output = `-${data.output}`;\n            data.expression = `-${data.expression}`;\n            // removing negative sign in case expression is positive\n        } else if (\n            data.output === data.expression &&\n            parseFloat(data.output) < 0\n        ) {\n            data.output = data.output.slice(1);\n            data.expression = data.expression.slice(1);\n        } else if (\n            data.output !== data.expression &&\n            !isNaN(parseInt(lastChar))\n        ) {\n            // returning evaluation function in case user double clicked change sign operator\n            if (data.output.charAt(0) === \"-\")\n                return this.expressionHandler(data.expression);\n            // changing sign of the last digit in the expression\n            let sliceIndex = data.expression.length - data.output.length;\n            data.expression = `${data.expression.slice(0, sliceIndex)}-${\n                data.output\n            }`;\n            data.output = `-${data.output}`;\n        }\n        this.setState({ calc: data });\n    }\n\n    /* this func deals with user input in case at least one calculation is already performed. If user wants to continue \n    with the lastAnswer, clicking one of the math operators will do so, in case new digit is clicked, calculation starts \n    from the beginning */\n    newCalcHandler = (item, data) => {\n        if (!isNaN(parseInt(item))) {\n            this.clearAllHandler();\n            data.output = item;\n            data.expression = item;\n            data.grandTotal = false;\n        } else {\n            data.output += item;\n            data.expression += item;\n            data.grandTotal = false;\n        }\n        return this.setState({ calc: data });\n    };\n\n    render() {\n        const controls = Object.entries(this.state).map(([key, val]) => {\n            if (key !== \"calc\") {\n                return (\n                    <Controls\n                        inputs={val}\n                        clicked={this.inputHandler}\n                        id={key}\n                        key={key}\n                        active={this.state.calc.decimalActive}\n                    />\n                );\n            } else return null;\n        });\n        return (\n            <div className=\"Calc\">\n                <Display\n                    exp={this.state.calc.expression}\n                    out={this.state.calc.output}\n                />\n                <div className=\"Controls\">{controls}</div>\n            </div>\n        );\n    }\n}\n\nexport default Calculator;\n","import React from \"react\";\n\nconst footer = () => {\n    return (\n        <div className=\"Footer\">\n            <a href=\"https://github.com/NikolaPerisic\" target=\"blank\">\n                @NP\n            </a>\n        </div>\n    );\n};\nexport default footer;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Calculator from \"./Containers/Calculator\";\nimport Footer from \"./Components/Footer\";\nclass App extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Calculator />\n                <Footer />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}